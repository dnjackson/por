<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>On software design on The Essence of Software</title>
    <link>https://essenceofsoftware.com/tutorials/design-general/</link>
    <description>Recent content in On software design on The Essence of Software</description>
    <image>
      <url>https://essenceofsoftware.com/eos-twitter-card.png</url>
      <link>https://essenceofsoftware.com/eos-twitter-card.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Daniel Jackson</copyright>
    <lastBuildDate>Tue, 02 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://essenceofsoftware.com/tutorials/design-general/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond the user interface</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/beyond-ui/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/beyond-ui/</guid>
      <description>In the 1980s, there was a revolution in software. The Apple Macintosh came out (building on the invention of the WIMP interface at PARC), Don Norman wrote The Design of Everyday Things, and the first CHI conference was held.
Now everyone knows how important user interface design is, and there’s no excuse for messing it up. You can find several collections of UI design heuristics (such as Nielsen’s) online, and many companies publish standards for how to use UI widgets consistently (here’s Google’s, for example).</description>
    </item>
    
    <item>
      <title>Design vs. engineering</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/design-vs-engineering/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/design-vs-engineering/</guid>
      <description>What&amp;#39;s the difference between design and engineering?</description>
    </item>
    
    <item>
      <title>Form, context &amp; misfits</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/misfits/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/misfits/</guid>
      <description>What is a design problem? What exactly is a design problem? And why are design problems often hard to solve?
The most compelling answer to this question, in my view, comes from Christopher Alexander in his influential book Notes on the Synthesis of Form (1964).
Most of the book is about a way to structure goals into a tree, by noting alignments and conflicts between them, and grouping them to minimize conflicts across groups.</description>
    </item>
    
    <item>
      <title>Generic fitness criteria</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/fitness-criteria/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/fitness-criteria/</guid>
      <description>Seven criteria What makes a design fit for purpose depends—surprise!—on the purpose. But generic criteria are helpful for two reasons. First, they give you some basis for evaluation, however crude. Second, they can be used as a checklist to suggest more specific ones.
A software product should be:
 Efficient: letting users accomplish their goals with no more steps or effort than needed; Flexible: supporting not just one fixed and narrow goal, but a range of goals that users are likely to have; Responsive: responding to requests from the user in a timely way; Understandable: behaving predictably, offering options and producing outcomes that make sense to users; Robust: tolerant of errors made by the user and other common perturbations of context, such as failures of other systems or agents to perform their expected roles; Secure: resistant to malicious attacks, including social engineering attacks that induce the user to perform unintended actions.</description>
    </item>
    
    <item>
      <title>How great design happens</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/great-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/great-design/</guid>
      <description>Think about your favorite product, whether it’s a photo-editing app or a toaster, and ask yourself: how did it get to be so good?
With all the hype in the design world about creativity and brainstorming, it’s easy to imagine that great designs simply appear, out of the blue. Someone conjures up a new idea, and it just needs to be translated from sketch to product. Maybe many details need to be added, but the quality of the design was there at the start—like a tiny seed that grows spontaneously into a magnificent tree.</description>
    </item>
    
    <item>
      <title>Levels of design</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/levels-of-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/levels-of-design/</guid>
      <description>When you’re diagnosing a usability snag, or coming up with a new design idea, it’s helpful to know what level you’re working at.
Over the years, designers and researchers have defined various levels, reflecting their view of design and what they emphasize.
I find the following scheme most helpful:
 Physical. If you want to think of levels as low and high, this one is at the bottom. It’s the level of design in which you’re concerned about the physical (and physiological) qualities of human users.</description>
    </item>
    
    <item>
      <title>Simplicity</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/simplicity/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/simplicity/</guid>
      <description>Most of us* believe that simplicity is the key to design. I’m a sucker for the best quotes about it. Here are some of my favorites. First, Tony Hoare in his Turing Award lecture lamenting the complexity of Algol-68:
I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.</description>
    </item>
    
  </channel>
</rss>
